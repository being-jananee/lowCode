## @section Global parameters
## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass
##

## @param global.storageClass Global StorageClass for Persistent Volume(s)
## @param global.namespaceOverride Override the namespace for resource deployed by the chart, but can itself be overridden by the local namespaceOverride
##
global:
  storageClass: ""
  namespaceOverride: ""
## @param fullnameOverride String to fully override bizBrainz.fullname template
##
fullnameOverride: ""
## @param containerName specify running container name in a pod
##
containerName: "bizBrainz"
## @param commonLabels Labels to add to all deployed objects
##
commonLabels: {}
## @param commonAnnotations Common annotations to add to all Bizbrainz resources (sub-charts are not considered). Evaluated as a template
##
commonAnnotations: {}
## @param schedulerName Name of the scheduler (other than default) to dispatch pods
## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
##
schedulerName: ""
## @param strategyType StrategyType for Bizbrainz&reg; statefulset
## It can be set to RollingUpdate or Recreate by default.
##
strategyType: RollingUpdate
## Image
##
image:
  registry: index.docker.io
  repository: bizBrainz/bizBrainz-ce
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"
## ServiceAccount
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
##
serviceAccount:
  ## @param serviceAccount.create Enable creation of ServiceAccount for Bizbrainz; pods
  ##
  create: true
  ## @param serviceAccount.name Name of the created serviceAccount
  ## If not set and create is true, a name is generated using the bizBrainz.fullname template
  ##
  name: ""
  ## @param serviceAccount.annotations Additional Service Account annotations
  ##
  annotations: {}

podAnnotations: {}

podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  ## @param service.type Kubernetes Service type
  ##
  type: ClusterIP
  ## @param service.port; service port
  ##
  port: 80
  ## @param service.nodePort; Node port to expose if service type is "LoadBalancer" or "NodePort"
  ##
  nodePort: 8000
  ## @param service.portName Bizbrainz; service port name
  ##
  portName: bizBrainz
  ## @param service.clusterIP Bizbrainz; service cluster IP
  ## e.g:
  ## clusterIP: None
  ##
  clusterIP: ""
  ## @param service.loadBalancerIP loadBalancerIP for Bizbrainz&reg; Service
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer
  ##
  loadBalancerIP: ""
  ## @param service.loadBalancerSourceRanges Address(es) that are allowed when service is LoadBalancer
  ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
  ##
  loadBalancerSourceRanges: []
  ## @param service.annotations Provide any additional annotations that may be required
  ##
  annotations: {}

ingress:
  ## @param ingress.enabled Enable ingress record generation for Ghost
  ##
  enabled: false
  ## @param ingress.annotations Additional custom annotations for the ingress record
  ## NOTE: If `ingress.certManager=true`, annotation `kubernetes.io/tls-acme: "true"` will automatically be added
  ##
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # cert-manager.io/cluster-issuer: "letsencrypt-prod"
    # nginx.ingress.kubernetes.io/ssl-redirect: "true"
    # nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  hosts: []
    # - host: bizBrainz-domain.me
  ## @param ingress.tls Enable TLS configuration for the host defined at `ingress.hosts` parameter
  ## You can:
  ##   - Use the `ingress.secrets` parameter to create this TLS secret
  ##   - Relay on cert-manager to create it by setting `ingress.certManager=true`
  ##   - Relay on Helm to create self-signed certificates by setting `ingress.selfSigned=true`
  ##
  tls: false
  ## @param ingress.secrets Custom TLS certificates as secrets
  ## NOTE: 'key' and 'certificate' are expected in PEM format
  ## NOTE: 'name' should line up with a 'secretName' set further up
  ## If it is not set and you're using cert-manager, this is unneeded, as it will create a secret for you with valid certificates
  ## If it is not set and you're NOT using cert-manager either, self-signed certificates will be created valid for 365 days
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  ## e.g:
  ## secrets:
  ##   - host: chart-example.local
  ##     key: |-
  ##       -----BEGIN RSA PRIVATE KEY-----
  ##       ...
  ##       -----END RSA PRIVATE KEY-----
  ##     certificate: |-
  ##       -----BEGIN CERTIFICATE-----
  ##       ...
  ##       -----END CERTIFICATE-----
  ##
  secrets: []
  ## @param ingress.certManager Enable ingress to use TLS certificates provided by Cert Manager
  ##
  certManager: false
  ## @param ingress.certManagerTls Specify the TLS secret created by Cert Manager
  ## e.g:
  ## certManagerTls:
  ##   - hosts:
  ##       - bizBrainz-domain.me
  ##     secretName: bizBrainz-tls
  certManagerTls: []
  ## @parm ingress.className Configure Ingress class that being used in ingress resource
  ## e.g:
  ## className: "nginx"
  ##
  className: ""

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  limits: {}
  requests: {}

nodeSelector: {}

tolerations: []

affinity: {}

persistence:
  ## @param persistence.enabled - Enable data persistence using PVC
  ##
  enabled: true
  ## @param persistence.storageClass PVC Storage Class
  ##
  storageClass: ""
  ## @param persistence.annotations Additional custom annotations for the PVC
  ##
  annotations: {}
  ## @param persistence.localStorage - Use local storage for PVC
  ##
  localStorage: false
  ## @param persistence.storagePath - local storage path
  ##
  storagePath: /tmp/hostpath_pv
  ## @param persistence.localCluster
  ##
  localCluster:
    - minikube
  ## @param persistence.accessModes PV Access Mode
  ##
  accessModes:
    - ReadWriteOnce
  ## @param persistence.size PVC Storage Request
  ##
  size: 10Gi
# tags:
#   install-ingress-nginx: true
storageClass:
  ## @param storageClass.enabled - Enable config storage class
  ##
  enabled: false
  ## @param storageClass.bindingMode - the binding mode for PVCs using this storage class
  ##
  bindingMode: Immediate
  ## @param storageClass.defaultClass - boolean to set annotation designating this object as the default storage class
  ##
  defaultClass: false
  ## @param storageClass.allowVolumeExpansion - allow expansion of PVCs using this storage class
  ##
  allowVolumeExpansion: true
  ## @param storageClass.reclaimPolicy - configures the retention of the PV when dynamically created using this class
  ##
  reclaimPolicy: Delete
  ## @param storageClass.provisioner - storage class parameters used for volumes created with this storage class
  ##
  provisioner: ""
  ## @param storageClass.annotations - annotations in yaml map format to be added to the object
  ##
  annotations: {}
  ## @param storageClass.mountOptions - options used by volumes created by this storage class
  ##
  mountOptions: {}
  ## @param storageClass.parameters - storage class parameters used for volumes created with this storage class
  ##
  parameters: {}

autoupdate:
  ## @param autoupdate.enabled - Enable config autoupdate
  ##
  enabled: false
  ## @param autoupdate.scheduler - Schedule cron job to check & update Helm image
  ##
  scheduler: "0 * * * *"

secretName: ""

applicationConfig:
  BIZBRAINZ_OAUTH2_GOOGLE_CLIENT_ID: ""
  BIZBRAINZ_OAUTH2_GOOGLE_CLIENT_SECRET: ""
  BIZBRAINZ_OAUTH2_GITHUB_CLIENT_ID: ""
  BIZBRAINZ_OAUTH2_GITHUB_CLIENT_SECRET: ""
  BIZBRAINZ_FORM_LOGIN_DISABLED: ""
  BIZBRAINZ_SIGNUP_DISABLED: ""
  BIZBRAINZ_CLIENT_LOG_LEVEL: ""
  BIZBRAINZ_GOOGLE_MAPS_API_KEY: ""
  BIZBRAINZ_MAIL_ENABLED: ""
  BIZBRAINZ_MAIL_HOST: ""
  BIZBRAINZ_MAIL_PORT: ""
  BIZBRAINZ_MAIL_USERNAME: ""
  BIZBRAINZ_MAIL_PASSWORD: ""
  BIZBRAINZ_MAIL_FROM: ""
  BIZBRAINZ_REPLY_TO: ""
  BIZBRAINZ_MAIL_SMTP_AUTH: ""
  BIZBRAINZ_MAIL_SMTP_TLS_ENABLED: ""
  BIZBRAINZ_DISABLE_TELEMETRY: ""
  BIZBRAINZ_RECAPTCHA_SITE_KEY: ""
  BIZBRAINZ_RECAPTCHA_SECRET_KEY: ""
  BIZBRAINZ_RECAPTCHA_ENABLED: ""
  BIZBRAINZ_MONGODB_URI: ""
  BIZBRAINZ_REDIS_URL: ""
  BIZBRAINZ_ENCRYPTION_PASSWORD: ""
  BIZBRAINZ_ENCRYPTION_SALT: ""
  BIZBRAINZ_CUSTOM_DOMAIN: ""
  BIZBRAINZ_DISABLE_IFRAME_WIDGET_SANDBOX: "false"
